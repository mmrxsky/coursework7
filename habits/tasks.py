from datetime import datetime, timedelta

import pytz
from celery import shared_task
from django.conf import settings

from habits.models import Habit
from habits.services import send_telegram_message


@shared_task(name="habits.tasks.send_notifications")
def send_notifications():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö –≤ telegram –∫–∞–Ω–∞–ª.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        timezone = pytz.timezone(settings.TIME_ZONE)
        current_time = datetime.now(timezone)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥—Ö–æ–¥–∏—Ç –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        habits = Habit.objects.filter(
            time__hour=current_time.hour, time__minute=current_time.minute
        )

        for habit in habits:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ telegram chat id
                if not habit.user or not habit.user.tg_chat_id:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
                if habit.periodicity > 1:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    last_notification = habit.last_notification
                    if last_notification:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                        days_since_last = (current_time.date() - last_notification).days
                        if days_since_last < habit.periodicity:
                            continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                message = _format_habit_message(habit)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                send_telegram_message(habit.user.tg_chat_id, message)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                habit.last_notification = current_time.date()
                habit.save(update_fields=["last_notification"])

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≤—ã—á–∫–∏ {habit.id}: {str(e)}")
                continue

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")


def _format_habit_message(habit):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    message = (
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ!\n\n"
        f"üìù –î–µ–π—Å—Ç–≤–∏–µ: {habit.action}\n"
        f"üìç –ú–µ—Å—Ç–æ: {habit.place}\n"
        f"‚è∞ –í—Ä–µ–º—è: {habit.time.strftime('%H:%M')}\n"
        f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {habit.periodicity} "
        f"{'–¥–µ–Ω—å' if habit.periodicity == 1 else '–¥–Ω—è' if 2 <= habit.periodicity <= 4 else '–¥–Ω–µ–π'}"
    )

    if habit.reward:
        message += f"\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: {habit.reward}"

    if habit.time_to_complete:
        message += (
            f"\n‚è± –í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {habit.time_to_complete.strftime('%H:%M')}"
        )

    if hasattr(habit, "associated_habit") and habit.associated_habit:
        message += f"\nüîÑ –°–≤—è–∑–∞–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: {habit.associated_habit.action}"

    return message
